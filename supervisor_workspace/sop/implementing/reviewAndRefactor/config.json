{
  "identifier": "reviewAndRefactor",
  "name": "审核与重构",
  "stage": "implementing",
  "description": "收敛结构、消除技术债。不改对外语义，确保所有测试保持绿色",
  "outputs": [
    {
      "name": "重构PR",
      "description": "代码重构的Pull Request和变更记录",
      "path": "docs/refactoring/",
      "type": "FOLDER",
      "template_filename": null,
      "template_content": ""
    },
    {
      "name": "代码质量报告",
      "description": "静态分析、复杂度分析、依赖关系分析报告",
      "path": "reports/code_quality_report.html",
      "type": "FILE",
      "template_filename": null,
      "template_content": ""
    },
    {
      "name": "架构文档",
      "description": "最终的系统架构和设计文档",
      "path": "docs/ARCHITECTURE.md",
      "type": "FILE",
      "template_filename": "architecture.md",
      "template_content": "# 系统架构文档\n\n## 项目概述\n- 项目名称: [项目名称]\n- 版本: [版本号]\n- 最后更新: [日期]\n- 架构师: [负责人]\n\n## 架构愿景\n\n### 设计原则\n- **单一职责**: 每个组件和模块都有明确的单一职责\n- **开闭原则**: 对扩展开放，对修改封闭\n- **里氏替换**: 契约单元的不同实现（FAKE/REAL）能够无缝替换\n- **接口隔离**: 不同功能的接口相互独立，避免臃肿接口\n- **依赖倒置**: 依赖抽象而非具体实现\n\n### 架构目标\n- **可测试性**: 支持单元测试、集成测试、契约测试的完整体系\n- **可维护性**: 清晰的模块边界和依赖关系\n- **可扩展性**: 便于添加新功能和适配不同场景\n- **可观测性**: 完善的日志、监控、告警体系\n- **高性能**: 满足生产环境的性能和并发要求\n\n## 系统架构概览\n\n```\n┌─────────────────────────────────────────┐\n│                 API层                    │\n│  ┌─────────────────────────────────────┐ │\n│  │        RESTful API Gateway          │ │\n│  │  (路由、验证、限流、监控)              │ │\n│  └─────────────────────────────────────┘ │\n└─────────────────────────────────────────┘\n                      │\n┌─────────────────────────────────────────┐\n│               业务逻辑层                   │\n│  ┌─────────────┐ ┌─────────────┐         │\n│  │ 契约单元A    │ │ 契约单元B    │ ...     │\n│  │ (REAL实现)  │ │ (FAKE实现)  │         │\n│  └─────────────┘ └─────────────┘         │\n└─────────────────────────────────────────┘\n                      │\n┌─────────────────────────────────────────┐\n│               基础设施层                   │\n│  ┌─────────┐ ┌─────────┐ ┌─────────┐     │\n│  │ 数据存储 │ │ 外部API │ │ 缓存系统 │     │\n│  └─────────┘ └─────────┘ └─────────┘     │\n└─────────────────────────────────────────┘\n```\n\n## 核心组件设计\n\n### API层\n**职责**: 接收外部请求，进行路由分发和初步验证\n- **API Gateway**: 统一入口，处理认证、限流、监控\n- **Request Validation**: 输入参数验证和格式化\n- **Response Formatting**: 统一响应格式和错误处理\n- **Rate Limiting**: API调用频率控制\n- **Logging & Monitoring**: 请求日志和性能监控\n\n**关键设计决策**:\n- 使用FastAPI/Django REST Framework作为API框架\n- 统一的错误响应格式和HTTP状态码\n- OpenAPI/Swagger文档自动生成\n- 请求追踪和分布式链路跟踪\n\n### 业务逻辑层\n**职责**: 实现核心业务逻辑，封装为可替换的契约单元\n- **Contract Units**: 业务能力的抽象单元\n- **Maturity Management**: STUB/FAKE/REAL状态管理\n- **Business Rules**: 业务规则和不变量验证\n- **Workflow Orchestration**: 业务流程编排\n\n**关键设计决策**:\n- 契约单元使用装饰器标注成熟度\n- FAKE和REAL实现通过相同的契约测试\n- 业务逻辑与基础设施解耦\n- 支持依赖注入和配置管理\n\n### 基础设施层\n**职责**: 提供数据存储、外部集成、缓存等基础服务\n- **Data Access**: 数据库访问和ORM封装\n- **External Integration**: 第三方系统集成\n- **Caching**: 缓存策略和实现\n- **Message Queue**: 异步消息处理\n- **Configuration**: 配置管理和环境适配\n\n**关键设计决策**:\n- Repository模式封装数据访问\n- 适配器模式处理外部系统集成\n- 多级缓存策略（本地缓存+分布式缓存）\n- 事件驱动的异步处理机制\n\n## 数据流和交互\n\n### 典型请求流程\n1. **请求接收**: API Gateway接收并验证请求\n2. **路由分发**: 根据路径和方法分发到对应处理器\n3. **参数验证**: 验证输入参数格式和业务规则\n4. **业务处理**: 调用契约单元执行业务逻辑\n5. **数据访问**: 通过Repository访问数据存储\n6. **结果组装**: 组装响应数据并格式化\n7. **响应返回**: 返回统一格式的响应\n\n### 错误处理流程\n1. **异常捕获**: 在各层捕获相应的异常类型\n2. **错误分类**: 区分业务错误、系统错误、网络错误\n3. **错误转换**: 将内部异常转换为用户友好的错误信息\n4. **错误记录**: 记录错误日志和监控指标\n5. **降级处理**: 必要时触发服务降级或熔断\n\n## 技术栈选择\n\n### 后端技术栈\n- **Web框架**: FastAPI / Django REST Framework\n- **数据库**: PostgreSQL (主) + Redis (缓存)\n- **ORM**: SQLAlchemy / Django ORM\n- **异步处理**: Celery + RabbitMQ\n- **测试框架**: pytest + pytest-asyncio\n\n### 基础设施\n- **容器化**: Docker + Docker Compose\n- **编排**: Kubernetes\n- **CI/CD**: GitHub Actions / GitLab CI\n- **监控**: Prometheus + Grafana\n- **日志**: ELK Stack (Elasticsearch + Logstash + Kibana)\n\n### 开发工具\n- **代码质量**: Black, isort, mypy, pylint\n- **文档**: Sphinx + Read the Docs\n- **API文档**: OpenAPI/Swagger UI\n- **依赖管理**: Poetry / pip-tools\n\n## 部署架构\n\n### 环境划分\n- **开发环境**: 本地开发和单元测试\n- **测试环境**: 集成测试和回归测试\n- **预生产环境**: 性能测试和生产验证\n- **生产环境**: 正式服务部署\n\n### 部署拓扑\n```\n[负载均衡器]\n       │\n   ┌───┴───┐\n   │  API  │ (多实例)\n   │ Gateway│\n   └───┬───┘\n       │\n   ┌───┴───┐\n   │业务逻辑│ (多实例)\n   │  服务  │\n   └───┬───┘\n       │\n   ┌───┴───┬─────────┬─────────┐\n   │数据库 │  缓存    │ 消息队列 │\n   │集群   │  集群    │  集群   │\n   └───────┴─────────┴─────────┘\n```\n\n## 安全考虑\n\n### 认证授权\n- **认证方式**: JWT Token + OAuth2\n- **权限控制**: RBAC (Role-Based Access Control)\n- **API安全**: API Key + Rate Limiting\n- **数据加密**: 传输加密(TLS) + 存储加密\n\n### 安全防护\n- **输入验证**: 严格的参数验证和SQL注入防护\n- **输出编码**: XSS防护和敏感信息脱敏\n- **访问控制**: IP白名单和地理位置限制\n- **审计日志**: 完整的操作审计和安全事件记录\n\n## 性能考虑\n\n### 性能目标\n- **响应时间**: API响应时间P95 < 500ms\n- **并发处理**: 支持1000+ QPS\n- **可用性**: 99.9%可用性保证\n- **错误率**: 错误率 < 0.1%\n\n### 性能优化策略\n- **缓存策略**: 多级缓存，热点数据缓存\n- **数据库优化**: 索引优化，读写分离\n- **异步处理**: 长耗时操作异步化\n- **连接池**: 数据库和Redis连接池管理\n- **CDN**: 静态资源CDN加速\n\n## 监控和运维\n\n### 监控指标\n- **业务指标**: API调用量、成功率、响应时间\n- **系统指标**: CPU、内存、磁盘、网络使用率\n- **应用指标**: 线程池、连接池、缓存命中率\n- **错误监控**: 异常率、错误分布、告警触发\n\n### 日志管理\n- **日志级别**: DEBUG, INFO, WARN, ERROR\n- **日志格式**: 结构化JSON格式\n- **日志聚合**: 集中式日志收集和分析\n- **日志保留**: 根据重要性设置不同保留周期\n\n### 告警机制\n- **阈值告警**: 基于指标阈值的自动告警\n- **异常告警**: 应用异常和错误的实时告警\n- **业务告警**: 业务指标异常的告警\n- **告警升级**: 分级告警和升级机制\n\n## 扩展性设计\n\n### 水平扩展\n- **无状态设计**: 应用服务无状态，支持水平扩展\n- **数据分片**: 数据库分库分表策略\n- **缓存分片**: Redis集群和一致性哈希\n- **消息队列**: 分布式消息队列扩展\n\n### 垂直扩展\n- **功能模块化**: 按业务域垂直拆分\n- **微服务化**: 渐进式微服务拆分\n- **API版本化**: 向后兼容的API版本管理\n- **数据库分离**: 读写分离和主从复制\n\n## 灾难恢复\n\n### 备份策略\n- **数据备份**: 定期全量备份和实时增量备份\n- **配置备份**: 配置文件和环境变量备份\n- **代码备份**: 多地代码仓库备份\n- **文档备份**: 重要文档的版本控制和备份\n\n### 故障恢复\n- **自动故障转移**: 数据库和缓存的主从切换\n- **服务降级**: 非核心功能的自动降级\n- **熔断机制**: 防止级联故障的熔断保护\n- **快速回滚**: 快速回滚到稳定版本的能力\n\n## 合规性考虑\n\n### 数据保护\n- **数据分类**: 敏感数据分类和保护等级\n- **数据脱敏**: 测试环境数据脱敏处理\n- **数据删除**: 用户数据删除和清理机制\n- **隐私保护**: 个人信息保护和匿名化\n\n### 法规遵循\n- **GDPR**: 欧盟数据保护法规遵循\n- **SOX**: 萨班斯法案合规要求\n- **行业标准**: 相关行业标准和最佳实践\n- **审计要求**: 内外部审计支持\n\n## 技术债务\n\n### 当前技术债务\n[在这里记录当前识别的技术债务]\n\n### 偿还计划\n[在这里制定技术债务的偿还计划]\n\n## 未来演进\n\n### 短期计划 (3-6个月)\n- [短期技术改进和功能增强计划]\n\n### 中期计划 (6-12个月)\n- [中期架构演进和扩展计划]\n\n### 长期愿景 (1-2年)\n- [长期技术愿景和架构目标]\n\n## 变更记录\n\n| 版本 | 日期 | 变更内容 | 变更原因 | 负责人 |\n|------|------|----------|----------|--------|\n| 1.0 | [日期] | 初始版本 | 项目启动 | [负责人] |\n| 1.1 | [日期] | [变更描述] | [变更原因] | [负责人] |"
    },
    {
      "name": "技术债务清单",
      "description": "识别的技术债务和后续改进计划",
      "path": "docs/TECH_DEBT.md",
      "type": "FILE",
      "template_filename": "tech-debt.md",
      "template_content": "# 技术债务清单\n\n## 概述\n- 项目名称: [项目名称]\n- 评估日期: [日期]\n- 负责人: [技术负责人]\n- 下次评估: [计划日期]\n\n## 技术债务分类\n\n### 代码质量债务\n影响代码可读性、可维护性的问题\n\n#### 高优先级\n| 债务描述 | 位置 | 影响程度 | 预计工作量 | 负责人 | 期限 |\n|----------|------|----------|------------|--------|------|\n| [具体的代码质量问题] | [文件路径] | 高 | [人天] | [开发者] | [日期] |\n\n#### 中优先级\n| 债务描述 | 位置 | 影响程度 | 预计工作量 | 负责人 | 期限 |\n|----------|------|----------|------------|--------|------|\n| [具体的代码质量问题] | [文件路径] | 中 | [人天] | [开发者] | [日期] |\n\n#### 低优先级\n| 债务描述 | 位置 | 影响程度 | 预计工作量 | 负责人 | 期限 |\n|----------|------|----------|------------|--------|------|\n| [具体的代码质量问题] | [文件路径] | 低 | [人天] | [开发者] | [日期] |\n\n### 架构债务\n影响系统设计和扩展性的问题\n\n#### 循环依赖\n- **问题**: [描述具体的循环依赖]\n- **影响**: 增加耦合度，影响模块独立性\n- **解决方案**: [具体的解决方案]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n#### 模块边界模糊\n- **问题**: [描述模块边界不清晰的问题]\n- **影响**: 职责不明确，维护困难\n- **解决方案**: [重新设计模块边界]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n#### 设计模式误用\n- **问题**: [描述设计模式使用不当的情况]\n- **影响**: 增加复杂度，降低可读性\n- **解决方案**: [改进设计模式使用]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n### 性能债务\n影响系统性能的问题\n\n#### 数据库查询优化\n- **问题**: [描述具体的性能问题]\n- **位置**: [相关代码位置]\n- **性能影响**: [具体的性能指标]\n- **解决方案**: [优化策略]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n#### 缓存策略不当\n- **问题**: [描述缓存相关问题]\n- **影响**: [对性能的具体影响]\n- **解决方案**: [改进缓存策略]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n#### 算法复杂度问题\n- **问题**: [描述算法效率问题]\n- **位置**: [函数或方法]\n- **复杂度**: [当前复杂度 → 目标复杂度]\n- **解决方案**: [算法优化方案]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n### 测试债务\n影响测试质量和覆盖率的问题\n\n#### 测试覆盖率不足\n- **当前覆盖率**: [百分比]\n- **目标覆盖率**: [百分比]\n- **未覆盖模块**: [具体模块列表]\n- **补充计划**: [测试补充计划]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n#### 测试质量问题\n- **问题**: [描述测试质量问题]\n- **影响**: [对测试可靠性的影响]\n- **解决方案**: [改进测试质量的方案]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n#### 缺少特定类型测试\n- **缺少的测试类型**: [集成测试/性能测试/安全测试等]\n- **风险**: [缺少这类测试的风险]\n- **补充计划**: [测试补充计划]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n### 文档债务\n影响知识传递和维护的问题\n\n#### API文档不完整\n- **缺失内容**: [具体缺失的文档内容]\n- **影响**: [对开发和使用的影响]\n- **补充计划**: [文档补充计划]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n#### 架构文档滞后\n- **滞后内容**: [与实际实现不符的文档]\n- **影响**: [对理解和维护的影响]\n- **更新计划**: [文档更新计划]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n#### 运维文档缺失\n- **缺失内容**: [部署、监控、故障处理等文档]\n- **影响**: [对运维效率的影响]\n- **补充计划**: [运维文档补充计划]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n### 技术选型债务\n不合适的技术选择导致的问题\n\n#### 过时的依赖库\n- **过时组件**: [具体的过时依赖]\n- **版本**: [当前版本 → 目标版本]\n- **风险**: [安全风险、兼容性风险等]\n- **升级计划**: [升级策略和计划]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n#### 不合适的技术栈\n- **问题技术**: [不合适的技术选择]\n- **问题描述**: [具体问题和影响]\n- **替代方案**: [更合适的技术选择]\n- **迁移计划**: [技术迁移计划]\n- **工作量**: [人天]\n- **优先级**: [高/中/低]\n\n## 债务偿还计划\n\n### 本Sprint计划 (2周)\n- [ ] [具体的债务项] - [负责人] - [截止日期]\n- [ ] [具体的债务项] - [负责人] - [截止日期]\n- [ ] [具体的债务项] - [负责人] - [截止日期]\n\n### 下个Sprint计划 (2周)\n- [ ] [具体的债务项] - [负责人] - [截止日期]\n- [ ] [具体的债务项] - [负责人] - [截止日期]\n\n### 季度计划 (3个月)\n- [ ] [重大技术债务项] - [负责团队] - [截止日期]\n- [ ] [重大技术债务项] - [负责团队] - [截止日期]\n\n### 年度计划 (12个月)\n- [ ] [战略性技术债务] - [负责部门] - [截止日期]\n- [ ] [战略性技术债务] - [负责部门] - [截止日期]\n\n## 预防措施\n\n### 代码质量预防\n- **代码审查**: 强制代码审查流程\n- **静态分析**: 集成静态分析工具到CI\n- **编码规范**: 制定和执行编码规范\n- **重构时间**: 定期安排重构时间\n\n### 架构治理\n- **架构评审**: 定期架构评审会议\n- **设计文档**: 强制重要功能的设计文档\n- **依赖管理**: 定期审查和清理依赖关系\n- **模块边界**: 明确定义模块边界和接口\n\n### 测试策略\n- **TDD实践**: 推广测试驱动开发\n- **自动化测试**: 扩大自动化测试覆盖\n- **测试质量**: 定期评估测试质量\n- **性能测试**: 集成性能测试到CI/CD\n\n### 文档管理\n- **文档同步**: 代码变更时同步更新文档\n- **文档审查**: 定期审查文档的准确性\n- **知识分享**: 定期技术分享和培训\n- **工具支持**: 使用工具自动生成部分文档\n\n## 度量指标\n\n### 债务数量趋势\n- **总债务数**: [当前数量]\n- **本月新增**: [新增数量]\n- **本月解决**: [解决数量]\n- **趋势**: [上升/稳定/下降]\n\n### 债务影响评估\n- **高优先级债务**: [数量] ([百分比])\n- **中优先级债务**: [数量] ([百分比])\n- **低优先级债务**: [数量] ([百分比])\n\n### 解决效率\n- **平均解决时间**: [天数]\n- **按时完成率**: [百分比]\n- **超期债务**: [数量]\n\n## 风险评估\n\n### 高风险债务\n影响系统稳定性或安全性的债务\n- [具体的高风险债务描述]\n- [风险等级和影响评估]\n- [应急处理方案]\n\n### 累积风险\n多个债务累积可能造成的风险\n- [累积风险描述]\n- [触发条件]\n- [风险缓解措施]\n\n## 资源分配\n\n### 时间分配\n- **新功能开发**: [百分比]\n- **技术债务偿还**: [百分比] \n- **Bug修复**: [百分比]\n- **维护工作**: [百分比]\n\n### 人员分配\n- **专职重构**: [人数]\n- **兼职重构**: [人数]\n- **代码审查**: [人数]\n- **架构设计**: [人数]\n\n## 决策记录\n\n### 债务接受决策\n有时为了快速交付可能会有意接受某些技术债务\n\n| 债务项 | 接受原因 | 接受日期 | 计划偿还日期 | 负责人 |\n|--------|----------|----------|--------------|--------|\n| [债务描述] | [业务紧急性] | [日期] | [日期] | [负责人] |\n\n### 债务拒绝决策\n某些技术债务可能因为成本过高而选择不解决\n\n| 债务项 | 拒绝原因 | 决策日期 | 替代方案 | 负责人 |\n|--------|----------|----------|----------|--------|\n| [债务描述] | [成本收益分析] | [日期] | [替代方案] | [负责人] |\n\n## 学习和改进\n\n### 根因分析\n分析技术债务产生的根本原因\n- **时间压力**: [分析时间压力导致的债务]\n- **技能缺口**: [分析技能不足导致的债务]\n- **流程问题**: [分析流程缺陷导致的债务]\n- **工具缺失**: [分析工具不足导致的债务]\n\n### 改进措施\n基于根因分析制定的改进措施\n- [具体的流程改进措施]\n- [技能培训计划]\n- [工具引入计划]\n- [制度完善措施]\n\n## 变更记录\n\n| 日期 | 变更内容 | 变更原因 | 负责人 |\n|------|----------|----------|--------|\n| [日期] | 创建技术债务清单 | 建立债务管理制度 | [负责人] |\n| [日期] | [变更描述] | [变更原因] | [负责人] |"
    }
  ]
}