{
  "identifier": "reviewAndRefactor",
  "name": "审核与重构",
  "stage": "implementing",
  "description": "收敛结构、消除技术债。不改对外语义，确保所有测试保持绿色",
  "outputs": [
    {
      "output_id": "f4bdf17e-6480-4835-b457-30bc8c565cc9",
      "name": "重构PR",
      "description": "代码重构的Pull Request和变更记录",
      "path": "docs/refactoring/",
      "type": "FOLDER",
      "template_filename": null
    },
    {
      "output_id": "6fb99429-bd7e-411e-be5c-87015a3ff661",
      "name": "代码质量报告",
      "description": "静态分析、复杂度分析、依赖关系分析报告",
      "path": "reports/code_quality_report.html",
      "type": "FILE",
      "template_filename": null
    },
    {
      "output_id": "f0191d7b-2cca-4732-93c9-0c85d6bd74ff",
      "name": "架构文档",
      "description": "最终的系统架构和设计文档",
      "path": "docs/ARCHITECTURE.md",
      "type": "FILE",
      "template_filename": "architecture.md"
    },
    {
      "output_id": "793a380d-ffa5-4f80-9c3e-3e21cc420607",
      "name": "技术债务清单",
      "description": "识别的技术债务和后续改进计划",
      "path": "docs/TECH_DEBT.md",
      "type": "FILE",
      "template_filename": "tech-debt.md"
    }
  ],
  "rules": [
    {
      "name": "代码审核要求",
      "when_condition": "进行代码质量审核时",
      "must": [
        "审查依赖关系的合理性和循环依赖",
        "识别和清理死代码和未使用的导入",
        "检查重复代码和冗余实现",
        "分析圈复杂度，简化复杂方法",
        "检查命名一致性和可读性",
        "验证错误处理的完整性和一致性",
        "审查测试覆盖率和测试质量",
        "检查文档的完整性和准确性"
      ],
      "must_not": [
        "不得忽略明显的代码质量问题",
        "不得接受不合理的循环依赖",
        "不得保留无用的死代码",
        "不得忽略命名不一致的问题",
        "不得省略必要的错误处理"
      ]
    },
    {
      "name": "重构实施原则",
      "when_condition": "执行代码重构时",
      "must": [
        "严格保持Public API不变",
        "所有测试必须在重构前后都通过",
        "采用小步快跑的重构策略",
        "每次重构专注于单一目标",
        "提炼方法和内联方法改善结构",
        "改名以提高代码可读性",
        "去除布尔旗标，改用Options/枚举",
        "职责下推/上提优化类层次结构"
      ],
      "must_not": [
        "严禁改变Public API的签名和语义",
        "严禁在重构过程中添加新功能",
        "不得进行大批量的重构变更",
        "不得忽略重构后的测试验证",
        "不得破坏现有的契约和接口"
      ]
    },
    {
      "name": "架构收敛要求",
      "when_condition": "整理最终架构时",
      "must": [
        "确保依赖关系清晰合理",
        "验证模块边界和职责分离",
        "确认设计模式的正确应用",
        "检查扩展点和可扩展性设计",
        "验证错误处理和异常传播",
        "确认配置管理和环境适配",
        "检查日志记录和可观测性",
        "验证安全考虑和权限控制"
      ],
      "must_not": [
        "不得接受模糊的模块边界",
        "不得忽略潜在的扩展需求",
        "不得省略重要的架构决策文档",
        "不得缺少关键的非功能性要求"
      ]
    },
    {
      "name": "技术债务管理",
      "when_condition": "识别和管理技术债务时",
      "must": [
        "系统性识别各类技术债务",
        "评估技术债务的影响程度和紧急性",
        "制定技术债务的偿还计划",
        "建立技术债务的跟踪机制",
        "预防新技术债务的产生",
        "平衡技术债务偿还和新功能开发",
        "定期回顾和更新技术债务清单"
      ],
      "must_not": [
        "不得忽略累积的技术债务",
        "不得无计划地偿还技术债务",
        "不得在不评估影响的情况下增加技术债务",
        "不得缺少技术债务的优先级管理"
      ]
    },
    {
      "name": "质量门控标准",
      "when_condition": "确保最终交付质量时",
      "must": [
        "代码覆盖率必须达到设定标准（通常≥85%）",
        "静态分析工具无严重问题报告",
        "所有契约测试、单元测试、集成测试通过",
        "代码审查100%完成",
        "性能指标满足预定目标",
        "安全扫描通过无高危漏洞",
        "文档完整性检查通过",
        "部署和运维就绪确认"
      ],
      "must_not": [
        "不得在质量门控未通过时发布",
        "不得降低质量标准以满足时间要求",
        "不得忽略自动化检查的失败结果",
        "不得省略必要的手动验证步骤"
      ]
    }
  ],
  "step_id": "d8358a2c-10cc-4758-8f64-167af5556ded"
}