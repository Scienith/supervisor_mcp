{
  "identifier": "stubToFake",
  "name": "Stub → Fake（TDD）",
  "stage": "implementing",
  "description": "让契约单元具备可工作的语义，通过行为用例。红→绿循环实现Fake版本",
  "outputs": [
    {
      "output_id": "ef7fec3d-6c94-4a96-889f-1b03deab2f33",
      "name": "Fake实现代码",
      "description": "具备完整语义的Fake版本契约单元",
      "path": "src/contracts/",
      "type": "FOLDER",
      "template_filename": null
    },
    {
      "output_id": "69180be9-a5fc-465e-935d-268f89bb5b59",
      "name": "语义E2E测试",
      "description": "从skeleton升级的语义E2E测试",
      "path": "tests/e2e/test_semantic_*.py",
      "type": "PATTERN",
      "template_filename": null
    },
    {
      "output_id": "31ee4033-ed33-4b73-a122-bdb187a6dcbf",
      "name": "Fake测试报告",
      "description": "Fake实现的测试覆盖和质量报告",
      "path": "reports/fake_test_report.html",
      "type": "FILE",
      "template_filename": null
    }
  ],
  "rules": [
    {
      "name": "TDD红绿重构循环",
      "when_condition": "实施Fake版本时",
      "must": [
        "首先打开该单元的契约测试，确保测试失败（红）",
        "实现最小可工作的Fake逻辑使测试通过（绿）",
        "重构代码提高可读性和结构（重构）",
        "保持测试始终通过，不破坏已有功能",
        "Fake实现应具备完整的业务语义",
        "使用内存数据结构模拟真实存储",
        "实现所有契约定义的方法和错误处理",
        "更新成熟度标签从STUB到FAKE"
      ],
      "must_not": [
        "不得跳过测试直接编写实现代码",
        "不得实现超出契约要求的额外功能",
        "不得在Fake中包含真实的外部系统调用",
        "不得忽略错误情况和边界条件的实现",
        "不得破坏现有的契约测试"
      ]
    },
    {
      "name": "Fake实现质量要求",
      "when_condition": "编写Fake实现时",
      "must": [
        "Fake应该模拟真实逻辑的行为语义",
        "使用可控的测试数据，支持各种场景",
        "实现确定性的行为，避免随机性",
        "支持故障注入和异常情况模拟",
        "保持高性能，避免复杂计算",
        "提供清晰的日志输出便于调试",
        "实现幂等性和状态一致性",
        "支持并发访问的基本安全性"
      ],
      "must_not": [
        "不得在Fake中实现真实的业务计算逻辑",
        "不得依赖外部系统或网络调用",
        "不得使用随机数影响测试确定性",
        "不得忽略性能考虑导致测试缓慢",
        "不得实现过于复杂的内部状态管理"
      ]
    },
    {
      "name": "语义E2E测试升级",
      "when_condition": "从skeleton测试升级到语义测试时",
      "must": [
        "将skeleton测试中的哨兵断言替换为语义断言",
        "验证结果的形状、内容和业务不变量",
        "测试主要的API调用路径和数据流",
        "覆盖正常、异常和边界情况",
        "确保测试独立性，不依赖执行顺序",
        "使用有意义的测试数据而非随机数据",
        "添加清晰的测试描述和期望结果",
        "保持测试的简洁性和可维护性"
      ],
      "must_not": [
        "不得保留skeleton测试的空断言",
        "不得编写依赖具体实现细节的测试",
        "不得使用硬编码数据影响测试通用性",
        "不得编写过于复杂的测试逻辑",
        "不得忽略异常流程的测试覆盖"
      ]
    },
    {
      "name": "成熟度标签管理",
      "when_condition": "完成Fake实施时",
      "must": [
        "更新契约单元的成熟度标签为FAKE",
        "在notes中记录Fake实现的特点和限制",
        "文档化Fake与真实实现的差异点",
        "记录后续Real实施的注意事项",
        "更新契约测试的执行配置",
        "确保标签变更后所有测试仍然通过"
      ],
      "must_not": [
        "不得在实现未完成时提前更新标签",
        "不得省略notes中的重要信息",
        "不得忽略标签变更对测试执行的影响",
        "不得缺少版本控制中的变更记录"
      ]
    }
  ],
  "step_id": "1820bcd5-555b-423d-b688-d5bf25bd6ca9"
}